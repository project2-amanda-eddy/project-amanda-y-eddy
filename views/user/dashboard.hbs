<div class="diary-container">
    <h1>Food Diary</h1>

    <form class="diary-form">
        <h5>What Have You Eaten Today?</h5>
        <div class="diary-inputs-container">
            <input type="text" id="diary-search-ingredient" name="ingredient" placeholder="Ex: apple">
            <input type="number" id="diary-amount" name="amount" placeholder="Ex: 100">
            <select type="text" id="diary-unit" name="unit">
                <option value="grams">Grams</option>
                <option value="cup">Cup</option>
            </select>
            <select type="text" id="diary-meal-time" name="meal-time">
                <option value="breakfast">Breakfast</option>
                <option value="lunch">Lunch</option>
                <option value="dinner">Dinner</option>
                <option value="other">Other</option>
            </select>
            <button id="diary-add-ingredient" type="submit"><i class='bx bxs-plus-circle'></i></button>
            <div id="foods-shows-results"></div>
        </div>
    </form>

    <div class="error-msg no-show">
        <h2>Something went wrong, try again.</h2>
    </div>

    <div class="diary-content">
        <div class="breakfast cards-diary">
            <h5>Breakfast</h5>
            <div class="breakfast-container ">
                {{#if finalDiary}}
                    {{#each finalDiary.breakfast as |option|}}
                        <div id="{{option.name}}-breakfast" class="diary-delete-container"> 
                            {{option.name}} <i class='bx bxs-trash trash-icon' ></i>
                        </div>
                    {{/each}}
                {{/if}}
            </div>
        </div>

        <div class="lunch cards-diary">
            <h5>Lunch</h5>
            <div class="lunch-container">
                {{#if finalDiary }}
                    {{#each finalDiary.lunch as |option|}}
                        <div id="{{option.name}}-lunch" class="diary-delete-container"> 
                            {{option.name}} <i class='bx bxs-trash trash-icon' ></i>
                        </div>
                    {{/each}}
                {{/if}}
            </div>
        </div>

        <div class="dinner cards-diary">
            <h5>Dinner</h5>
            <div class="dinner-container">
                {{#if finalDiary }}
                    {{#each finalDiary.dinner as |option|}}
                        <div id="{{option.name}}-dinner" class="diary-delete-container"> 
                            {{option.name}} <i class='bx bxs-trash trash-icon' ></i>
                        </div>
                    {{/each}}
                {{/if}}
            </div>
        </div>

        <div class="other cards-diary">
            <h5>Other</h5>
            <div class="other-container">
                {{#if finalDiary }}
                    {{#each finalDiary.other as |option|}}
                        <div id="{{option.name}}-other" class="diary-delete-container"> 
                            {{option.name}} <i class='bx bxs-trash trash-icon' ></i>
                        </div>
                    {{/each}}
                {{/if}}
            </div>
        </div>
    </div>

    <div class="diary-nutrition-information">
        <div class="cards-diary-nutrition-info">
            <h5>Total calories:</h5>
            <p>{{finalDiary.calories}} kcal/dia</p>
            <p>recommended: {{profile.GET}}</p>
        </div>
        <div class="cards-diary-nutrition-info">
            <h5>Total carbohydrates:</h5>
            <p>{{finalDiary.carbohydrates}} g/dia</p>
            <p>recommended: {{profile.recommendedCarbohydrate}} g/dia</p>
        </div>
        <div class="cards-diary-nutrition-info">
            <h5>Total proteins:</h5>
            <p>{{finalDiary.proteins}} g/dia</p>
            <p>recommended: {{profile.recommendedProtein}} g/dia</p>
        </div>
        <div class="cards-diary-nutrition-info">
            <h5>Total fat:</h5>
            <p>{{finalDiary.fats}} g/dia</p>
            <p>recommended: {{profile.recommendedFat}} g/dia</p>
        </div>
    </div>

    <div class="update-weight-dashboard">
        <h1>My weight</h1>
        <form>
            <label for="currentWeight">Do you want to update your current weight?</label>
            <input placeholder="Weight in kg" value="{{weight.weight}}" type="number" class="form-control" id="currentWeight" name="currentWeight">
            <p id="success-weight-msg" class="no-show success">Your weight has been succesfully updated.</p>
            <button id="weight-submit-btn" type="submit">Save</button>
        </form>
    </div>
</div>

<script>
    const inputDiary = document.getElementById('diary-search-ingredient');
    const foodsResults = document.getElementById('foods-shows-results');
    let idOfSelectedIngredient;

    let timerDiary;
    let myIntervalDiary;

    inputDiary.addEventListener('keyup', (e) => {
        timerDiary = 0;
        clearInterval(myIntervalDiary)
        myIntervalDiary = setInterval(function() {
            timerDiary+=1;
                if(timerDiary === 1) {
                    clearInterval(myIntervalDiary)
                    const query = inputDiary.value;
                    if(inputDiary.value) {
                        axios.get(`https://api.spoonacular.com/food/ingredients/search?query=${query}&apiKey=fcf1d538179d466baf22e7953d980be8`)
                        .then(res => {
                            foodsResults.innerHTML = '';
                            let resultsDiary = res.data.results;
                            resultsDiary.forEach(result => {
                                const divToAddDiary = document.createElement('div');
                                divToAddDiary.classList.add('diary-list-ingredient');
                                divToAddDiary.onclick = () => saveIngredientInfo(result.id, result.name)
                                divToAddDiary.innerHTML = `<h5>${result.name}</h5>`
                                foodsResults.appendChild(divToAddDiary);
                            })
                        })
                        .catch(err => console.log(err))
                    } else {
                        foodsResults.innerHTML = '';
                    }
                }
        }, 500);
    })

    //When click on the ingredient
    function saveIngredientInfo(ingredientId, ingredientName) {
        foodsResults.innerHTML = '';
        inputDiary.value = ingredientName;
        idOfSelectedIngredient = ingredientId;
    }

    //when click add button
    const diaryAmount = document.getElementById('diary-amount');
    const diaryMealTime = document.getElementById('diary-meal-time');
    const diaryUnit = document.getElementById('diary-unit');
    
    const buttonAdd = document.getElementById('diary-add-ingredient');
    buttonAdd.addEventListener('click', (e) => {
        e.preventDefault();

        let divToAppend = document.createElement('div');
        divToAppend.innerHTML = inputDiary.value;

        console.log(divToAppend)
        
        if(diaryMealTime.value === 'breakfast') {
            document.querySelector('.breakfast-container').appendChild(divToAppend);
        } else if(diaryMealTime.value === 'lunch') {
            document.querySelector('.lunch-container').appendChild(divToAppend);
        } else if(diaryMealTime.value === 'dinner') {
            document.querySelector('.dinner-container').appendChild(divToAppend);
        } else if(diaryMealTime.value === 'other') {
            document.querySelector('.other-container').appendChild(divToAppend);
        }


        let options = {
            method: 'post',
            url: '/diary',
            data: {
                'idOfIngredient': idOfSelectedIngredient,
                'diaryAmount': diaryAmount.value, 
                'diaryMealTime': diaryMealTime.value,
                'diaryUnit': diaryUnit.value
            }
        };
        
        axios(options)
        .then(res => window.location.reload())
        .catch(err => {
            document.getElementsByClassName('error-msg').classList.remove('no-show');
        })

        inputDiary.value = '';
        diaryAmount.value = '';
    })

    //On click on delete button 
    let deleteBtns = document.querySelectorAll('.trash-icon');

    deleteBtns.forEach((btn) => {
        btn.addEventListener('click', (e) => {
            const ingredientName = e.target.parentNode.id;
            e.target.parentNode.remove()

            axios.put(`/diary/${ingredientName}`)
            .then((res) => window.location.reload())
            .catch((err) => console.log(err))
        })
    })

    //Weight post petition
    const weightSubmitBtn = document.getElementById('weight-submit-btn');
    const successMsg = document.getElementById('success-weight-msg');
    const weightInput = document.getElementById('currentWeight');

    weightSubmitBtn.addEventListener('click', (e) => {
        e.preventDefault()
        const weightValue = weightInput.value;

        let options = {
            method: 'post',
            url: '/weight',
            data: {
                weight: weightValue
            }
        };

        axios(options)
        .then(response => {
            if (response.status === 201) {
                successMsg.classList.remove('no-show');
            }
        })
        .catch(err => console.log('error:', err))

    })
</script>
